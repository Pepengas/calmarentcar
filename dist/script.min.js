document.addEventListener("DOMContentLoaded",(function(){const bookingForm=document.getElementById("booking-form");const formElements=document.querySelectorAll(".form-group input, .form-group select");const mobileMenu=document.querySelector(".mobile-menu");const navLinks=document.querySelector(".nav-links");const navLinksItems=document.querySelectorAll(".nav-links a");const bookingFormContainer=document.querySelector(".booking-form");const faqItems=document.querySelectorAll(".faq-item");const carGrid=document.querySelector(".cars-grid");const carSelectionDropdown=document.getElementById("car-selection");const pickupDateInput=document.getElementById("pickup-date");const dropoffDateInput=document.getElementById("dropoff-date");const formSteps=document.querySelectorAll(".form-step");const steps=document.querySelectorAll(".step");const stepTitles=document.querySelectorAll(".step-title");const nextBtn=document.getElementById("to-step-2");const prevBtn=document.getElementById("to-step-1");let currentStep=1;async function fetchCars(){try{const response=await fetch("https://calmarentcar-production.up.railway.app/api/cars");if(!response.ok){throw new Error(`HTTP error! Status: ${response.status}`)}const cars=await response.json();return cars}catch(error){console.error("Failed to fetch cars:",error);if(carGrid)carGrid.innerHTML='<p class="error-message">Failed to load car fleet. Please try refreshing.</p>';if(carSelectionDropdown)carSelectionDropdown.innerHTML='<option value="" disabled selected>Failed to load cars</option>';return[]}}function displayCars(cars){if(!carGrid)return;carGrid.innerHTML="";if(cars.length===0){carGrid.innerHTML="<p>No cars available at the moment.</p>";return}cars.forEach((car=>{const card=document.createElement("div");card.className="car-card";let featuresHtml="";if(car.features&&car.features.length>0){featuresHtml=`<ul class="car-features"><li>${car.features.join("</li><li>")}</li></ul>`}card.innerHTML=`\n                <div class="car-image">\n                    <img src="${car.image}" alt="${car.name}" loading="lazy" width="300" height="200">\n                </div>\n                <div class="car-details">\n                    <h3>${car.name}</h3>\n                    <p>${car.description}</p>\n                    ${featuresHtml}\n                    <div class="car-pricing">\n                        <span class="price">From €${car.pricePerDay}/day</span>\n                        <span class="price-note">· Free cancellation</span>\n                    </div>\n                    <button class="btn btn-primary book-from-grid" data-car-id="${car.id}">Book Now</button>\n                </div>\n            `;carGrid.appendChild(card)}));addGridBookNowListeners()}function populateCarDropdown(cars){if(!carSelectionDropdown)return;const firstOption=carSelectionDropdown.querySelector("option[disabled]");carSelectionDropdown.innerHTML="";if(firstOption){carSelectionDropdown.appendChild(firstOption)}if(cars.length===0&&firstOption){firstOption.textContent="No cars available";return}cars.forEach((car=>{const option=document.createElement("option");option.value=car.id;option.textContent=`${car.name} - From €${car.pricePerDay}/day`;carSelectionDropdown.appendChild(option)}))}function addGridBookNowListeners(){const bookButtons=carGrid.querySelectorAll(".book-from-grid");bookButtons.forEach((button=>{button.addEventListener("click",(function(e){e.preventDefault();const carId=this.getAttribute("data-car-id");if(carSelectionDropdown){carSelectionDropdown.value=carId;carSelectionDropdown.dispatchEvent(new Event("change"))}const bookingFormSection=document.querySelector(".booking-form");if(bookingFormSection){bookingFormSection.scrollIntoView({behavior:"smooth",block:"start"})}const firstField=document.getElementById("pickup-location");if(firstField)firstField.focus()}))}))}async function checkAvailability(){if(!carSelectionDropdown||!pickupDateInput||!dropoffDateInput||!nextBtn)return;const carId=carSelectionDropdown.value;const pickupDate=pickupDateInput.value;const dropoffDate=dropoffDateInput.value;if(carId&&pickupDate&&dropoffDate){if(new Date(dropoffDate)<new Date(pickupDate)){showNotification("Drop-off date cannot be earlier than pickup date.","error");nextBtn.disabled=true;return}try{nextBtn.textContent="Checking...";nextBtn.disabled=true;const response=await fetch(`https://calmarentcar-production.up.railway.app/api/cars/availability?carId=${encodeURIComponent(carId)}&pickupDate=${encodeURIComponent(pickupDate)}&dropoffDate=${encodeURIComponent(dropoffDate)}`);if(!response.ok){throw new Error(`HTTP error! Status: ${response.status}`)}const data=await response.json();if(data.success&&data.available){console.log(`Car ${carId} is available from ${pickupDate} to ${dropoffDate}`);showNotification("Car is available for selected dates.","success",2e3);nextBtn.disabled=false}else{console.warn(`Car ${carId} is NOT available from ${pickupDate} to ${dropoffDate}`);showNotification(data.message||"Selected car is not available for these dates.","error");nextBtn.disabled=true}}catch(error){console.error("Failed to check availability:",error);showNotification("Could not check car availability. Please try again.","error");nextBtn.disabled=true}finally{nextBtn.textContent="Continue"}}else{if(nextBtn.textContent!=="Checking..."){const hasErrors=!!bookingForm.querySelector("#step-1 .form-group.error");nextBtn.disabled=hasErrors}}}async function initializeFleet(){const cars=await fetchCars();displayCars(cars);populateCarDropdown(cars)}initializeFleet();if(carSelectionDropdown)carSelectionDropdown.addEventListener("change",checkAvailability);if(pickupDateInput)pickupDateInput.addEventListener("change",checkAvailability);if(dropoffDateInput)dropoffDateInput.addEventListener("change",checkAvailability);if(nextBtn){nextBtn.addEventListener("click",(function(){const step1Fields=document.querySelectorAll("#step-1 input[required], #step-1 select[required]");let isStep1Valid=true;step1Fields.forEach((field=>{if(!validateField(field)){isStep1Valid=false}}));if(isStep1Valid&&!nextBtn.disabled){goToStep(2)}else if(isStep1Valid&&nextBtn.disabled){showNotification("Please select an available car and valid dates.","error")}else{const firstInvalidField=document.querySelector("#step-1 .form-group.error input, #step-1 .form-group.error select");if(firstInvalidField){firstInvalidField.focus()}showNotification("Please complete all required fields in this step.","error")}}))}if(prevBtn){prevBtn.addEventListener("click",(function(){goToStep(1)}))}const carCards=document.querySelectorAll(".car-card");if(bookingFormContainer){bookingFormContainer.style.display="block";bookingFormContainer.style.opacity="1"}if(carCards.length>0){const observer=new IntersectionObserver((entries=>{entries.forEach((entry=>{if(entry.isIntersecting){entry.target.classList.add("card-visible");observer.unobserve(entry.target)}}))}),{threshold:.1,rootMargin:"0px 0px -50px 0px"});carCards.forEach((card=>{observer.observe(card)}))}mobileMenu.addEventListener("click",(()=>{const isExpanded=mobileMenu.getAttribute("aria-expanded")==="true";navLinks.classList.toggle("active");mobileMenu.setAttribute("aria-expanded",!isExpanded);if(isExpanded){mobileMenu.querySelector("i").classList.add("fa-bars");mobileMenu.querySelector("i").classList.remove("fa-times");mobileMenu.setAttribute("aria-label","Open navigation menu")}else{mobileMenu.querySelector("i").classList.remove("fa-bars");mobileMenu.querySelector("i").classList.add("fa-times");mobileMenu.setAttribute("aria-label","Close navigation menu")}}));document.addEventListener("keydown",(function(e){if(window.innerWidth<=991&&navLinks.classList.contains("active")){const focusableElements=navLinks.querySelectorAll("a, button");const firstFocusable=focusableElements[0];const lastFocusable=focusableElements[focusableElements.length-1];if(e.key==="Tab"){if(e.shiftKey&&document.activeElement===firstFocusable){e.preventDefault();lastFocusable.focus()}else if(!e.shiftKey&&document.activeElement===lastFocusable){e.preventDefault();firstFocusable.focus()}}if(e.key==="Escape"){navLinks.classList.remove("active");mobileMenu.setAttribute("aria-expanded","false");mobileMenu.querySelector("i").classList.add("fa-bars");mobileMenu.querySelector("i").classList.remove("fa-times");mobileMenu.focus()}}}));navLinksItems.forEach((link=>{link.addEventListener("click",(function(e){if(this.getAttribute("href").startsWith("#")&&this.getAttribute("href")!=="#"){e.preventDefault();const targetId=this.getAttribute("href");const targetElement=document.querySelector(targetId);if(targetElement){navLinks.classList.remove("active");mobileMenu.setAttribute("aria-expanded","false");mobileMenu.querySelector("i").classList.remove("fa-times");mobileMenu.querySelector("i").classList.add("fa-bars");window.scrollTo({top:targetElement.offsetTop-80,behavior:"smooth"});navLinksItems.forEach((item=>item.classList.remove("active")));this.classList.add("active");targetElement.setAttribute("tabindex","-1");targetElement.focus({preventScroll:true});setTimeout((()=>{targetElement.removeAttribute("tabindex")}),1e3)}}}))}));faqItems.forEach((item=>{const question=item.querySelector(".faq-question");const answer=item.querySelector(".faq-answer");question.setAttribute("aria-expanded","false");answer.setAttribute("aria-hidden","true");question.addEventListener("click",(()=>{const isActive=item.classList.contains("active");faqItems.forEach((faqItem=>{const faqQuestion=faqItem.querySelector(".faq-question");const faqAnswer=faqItem.querySelector(".faq-answer");faqItem.classList.remove("active");faqQuestion.setAttribute("aria-expanded","false");faqAnswer.setAttribute("aria-hidden","true")}));if(!isActive){item.classList.add("active");question.setAttribute("aria-expanded","true");answer.setAttribute("aria-hidden","false")}}));question.addEventListener("keydown",(e=>{if(e.key==="Enter"||e.key===" "){e.preventDefault();question.click()}}));question.setAttribute("tabindex","0");question.setAttribute("role","button")}));function validateField(field){const fieldName=field.name;const value=field.value.trim();const formGroup=field.closest(".form-group");const errorElement=formGroup?.querySelector(".validation-message");if(!formGroup||!errorElement)return true;formGroup.classList.remove("error","success");errorElement.textContent="";errorElement.style.display="none";let isValid=true;let errorMessage="";if(field.hasAttribute("required")&&value===""){errorMessage="This field is required";isValid=false}if(isValid&&value!==""){switch(fieldName){case"pickup-date":case"dropoff-date":const dateValue=new Date(value);const today=new Date;today.setHours(0,0,0,0);if(dateValue<today){errorMessage="Date cannot be in the past.";isValid=false}if(fieldName==="dropoff-date"){const pickupValue=document.getElementById("pickup-date")?.value;if(pickupValue&&new Date(value)<new Date(pickupValue)){errorMessage="Drop-off date cannot be before pickup date.";isValid=false}}break;case"customer-email":const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;if(!emailRegex.test(value)){errorMessage="Please enter a valid email address.";isValid=false}break;case"customer-phone":const phoneRegex=/^[+\d\s]{8,}$/;if(!phoneRegex.test(value)){errorMessage="Please enter a valid phone number.";isValid=false}break;case"age":const age=parseInt(value);if(isNaN(age)||age<21||age>90){errorMessage="Age must be between 21 and 90.";isValid=false}break}}if(!isValid){showError(formGroup,errorElement,errorMessage)}else{showSuccess(formGroup)}return isValid}function showError(formGroup,errorElement,message){formGroup.classList.add("error");formGroup.classList.remove("success");errorElement.textContent=message;errorElement.style.display="block"}function showSuccess(formGroup){formGroup.classList.add("success");formGroup.classList.remove("error");const errorElement=formGroup.querySelector(".validation-message");if(errorElement){errorElement.textContent="";errorElement.style.display="none"}}formElements.forEach((element=>{element.addEventListener("blur",(function(){validateField(this)}));if(element.tagName==="SELECT"||element.type==="date"||element.type==="time"){element.addEventListener("change",(function(){validateField(this)}))}}));if(bookingForm){bookingForm.addEventListener("submit",(function(e){e.preventDefault();let isClientValid=true;const step2Fields=bookingForm.querySelectorAll("#step-2 [required]");step2Fields.forEach((field=>{if(!validateField(field)){isClientValid=false}}));const step1Fields=bookingForm.querySelectorAll("#step-1 [required]");step1Fields.forEach((field=>{if(!validateField(field)){isClientValid=false}}));if(nextBtn&&nextBtn.disabled){isClientValid=false;showNotification("Selected car or dates are unavailable.","error")}if(!isClientValid){const firstInvalidField=bookingForm.querySelector(".form-group.error input, .form-group.error select");if(firstInvalidField){firstInvalidField.focus()}showNotification("Please fill in all required fields correctly and ensure car is available.","error");return}const formData=new FormData(bookingForm);const bookingData={};formData.forEach(((value,key)=>{bookingData[key]=value}));const loadingIndicator=document.createElement("div");loadingIndicator.className="loading-indicator";loadingIndicator.innerHTML=`<div class="spinner"></div><span>Processing...</span>`;document.body.appendChild(loadingIndicator);const submitButton=bookingForm.querySelector('button[type="submit"]');if(submitButton)submitButton.disabled=true;fetch("https://calmarentcar-production.up.railway.app/api/book",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(bookingData)}).then((response=>{if(!response.ok){return response.json().then((errData=>{throw new Error(errData.message||`HTTP error! Status: ${response.status}`)}))}return response.json()})).then((data=>{if(data.success){showBookingSuccess(data);bookingForm.scrollIntoView({behavior:"smooth"})}else{throw new Error(data.message||"Backend reported an issue.")}})).catch((error=>{console.error("Error submitting booking:",error);showNotification(`Error: ${error.message}`,"error")})).finally((()=>{if(document.body.contains(loadingIndicator)){document.body.removeChild(loadingIndicator)}}))}))}function getCarName(carValue){const option=carSelectionDropdown?.querySelector(`option[value="${carValue}"]`);return option?option.textContent.split(" - ")[0]:"Selected Car"}function goToStep(stepNumber){formSteps.forEach((step=>{step.classList.remove("active")}));steps.forEach((step=>{step.classList.remove("active");step.classList.remove("completed")}));stepTitles.forEach((title=>{title.classList.remove("active")}));document.getElementById(`step-${stepNumber}`).classList.add("active");for(let i=1;i<=steps.length;i++){const stepEl=document.querySelector(`.step[data-step="${i}"]`);const titleEl=document.querySelector(`.step-title:nth-child(${i})`);if(i<stepNumber){stepEl.classList.add("completed")}else if(i===stepNumber){stepEl.classList.add("active");titleEl.classList.add("active")}}currentStep=stepNumber}window.addEventListener("scroll",(function(){const scrollPosition=window.scrollY;const sections=document.querySelectorAll("section[id]");sections.forEach((section=>{const sectionTop=section.offsetTop-100;const sectionHeight=section.offsetHeight;const sectionId=section.getAttribute("id");if(scrollPosition>=sectionTop&&scrollPosition<sectionTop+sectionHeight){navLinksItems.forEach((item=>item.classList.remove("active")));const correspondingLink=document.querySelector(`.nav-links a[href="#${sectionId}"]`);if(correspondingLink){correspondingLink.classList.add("active")}}}))}));function showNotification(message,type="success",duration=5e3){const notification=document.createElement("div");notification.className=`notification notification-${type}`;notification.textContent=message;const closeButton=document.createElement("button");closeButton.innerHTML="&times;";closeButton.className="close-button";closeButton.onclick=()=>closeNotification(notification);notification.appendChild(closeButton);document.body.appendChild(notification);const timer=setTimeout((()=>closeNotification(notification)),duration);notification.addEventListener("mouseover",(()=>clearTimeout(timer)));notification.addEventListener("mouseleave",(()=>setTimeout((()=>closeNotification(notification)),duration)))}function closeNotification(notification){if(notification&&document.body.contains(notification)){notification.classList.add("hide");setTimeout((()=>{if(document.body.contains(notification)){document.body.removeChild(notification)}}),500)}}const dateInputs=document.querySelectorAll('input[type="date"]');const timeInputs=document.querySelectorAll('input[type="time"]');dateInputs.forEach((input=>{input.addEventListener("click",(function(e){e.preventDefault();if(typeof input.showPicker==="function"){try{input.showPicker()}catch(error){console.error("Error showing date picker:",error);input.focus()}}else{input.focus()}}))}));timeInputs.forEach((input=>{input.addEventListener("click",(function(e){e.preventDefault();if(typeof input.showPicker==="function"){try{input.showPicker()}catch(error){console.error("Error showing time picker:",error);input.focus()}}else{input.focus()}}))}));function showBookingSuccess(data){const emailInput=document.getElementById("customer-email");const carSelect=document.getElementById("car-selection");const pickupDateInput=document.getElementById("pickup-date");const dropoffDateInput=document.getElementById("dropoff-date");const email=emailInput?emailInput.value:"your email";const selectedCarOption=carSelect?carSelect.options[carSelect.selectedIndex]:null;const carName=selectedCarOption?selectedCarOption.text.split(" - ")[0]:"selected vehicle";const pickupDate=pickupDateInput?formatDisplayDate(pickupDateInput.value):"";const dropoffDate=dropoffDateInput?formatDisplayDate(dropoffDateInput.value):"";const bookingRef=generateBookingReference();const bookingForm=document.getElementById("booking-form");const successMessage=`\n            <div class="booking-success">\n                <div class="success-icon">\n                    <i class="fas fa-check-circle"></i>\n                </div>\n                <h2>Booking Request Successful!</h2>\n                <div class="booking-confirmation-message">\n                    <p>Thank you for your booking request. We've received your request for the <strong>${carName}</strong>.</p>\n                    <p>Your booking reference: <strong>${bookingRef}</strong></p>\n                    <p>Vehicle: <strong>${carName}</strong></p>\n                    ${pickupDate?`<p>Pick-up date: <strong>${pickupDate}</strong></p>`:""}\n                    ${dropoffDate?`<p>Drop-off date: <strong>${dropoffDate}</strong></p>`:""}\n                    <p>We've sent a confirmation email to <strong>${email}</strong> with all the details of your booking.</p>\n                    <p>If you have any questions, please contact our customer service.</p>\n                </div>\n                <button class="btn btn-primary" onclick="window.location.reload()">Make Another Booking</button>\n            </div>\n        `;bookingForm.innerHTML=successMessage;window.scrollTo({top:0,behavior:"smooth"})}function formatDisplayDate(dateString){if(!dateString)return"";const date=new Date(dateString);return date.toLocaleDateString("en-US",{weekday:"long",year:"numeric",month:"long",day:"numeric"})}function generateBookingReference(){const chars="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";let result="";for(let i=0;i<8;i++){result+=chars.charAt(Math.floor(Math.random()*chars.length))}return result}}));